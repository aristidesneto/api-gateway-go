name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod download

#      - name: Run tests
#        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
#
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v3
#        with:
#          file: ./coverage.txt
#          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Necessário para obter tags para versionamento

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build
        run: |
          VERSION=$(git describe --tags --always)
          go build -ldflags="-w -s -X main.version=$VERSION" -o apigateway ./cmd/apigateway

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: apigateway
          path: apigateway

  docker:
    name: Build and push Docker image
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

#      - name: Login to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Extract metadata for Docker
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: diillson/api-gateway-go
#          tags: |
#            type=ref,event=branch
#            type=ref,event=pr
#            type=semver,pattern={{version}}
#            type=semver,pattern={{major}}.{{minor}}
#            type=sha
#
#      - name: Build and push
#        uses: docker/build-push-action@v4
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#          cache-from: type=registry,ref=diillson/api-gateway-go:buildcache
#          cache-to: type=registry,ref=diillson/api-gateway-go:buildcache,mode=max
#
#  deploy:
#    name: Deploy to production
#    needs: [docker]
#    runs-on: ubuntu-latest
#    if: startsWith(github.ref, 'refs/tags/v')
#    steps:
#      - name: Deploy to production
#        run: |
#          echo "Deploying version ${{ github.ref_name }} to production"
#          # Aqui você pode adicionar comandos para deploy em produção
#          # Por exemplo, usando SSH para conectar ao servidor e atualizar o container
