version: '3.8'

services:
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - AG_SERVER_PORT=8080
#      - AG_DATABASE_DRIVER=postgres
#      - AG_DATABASE_DSN=postgres://postgres:postgres@postgres:5432/apigateway?sslmode=disable
      - AG_CACHE_TYPE=redis
      - AG_CACHE_ADDRESS=redis:6379
      - AG_LOGGING_LEVEL=debug
      - AG_LOGGING_FORMAT=console
      - AG_LOGGING_PRODUCTION=false
#      - LETSENCRYPT_EMAIL=seuemail@example.com
    volumes:
#      - apigateway_data:/app
      - ./config/config.yaml:/app/config/config.yaml
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health/liveness"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - api-gateway-network

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=apigateway
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - api-gateway-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - api-gateway-network

  prometheus:
    image: prom/prometheus:v2.43.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - api-gateway-network

  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./monitoring/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Metrics internas do Collector
      - "8889:8889"   # Endpoint de m√©tricas para o Prometheus
      - "13133:13133" # Health check
    depends_on:
      - zipkin
    networks:
      - api-gateway-network

  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    networks:
      - api-gateway-network
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:9411/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  grafana:
    image: grafana/grafana:9.5.1
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - api-gateway-network

networks:
  api-gateway-network:
   driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
#  apigateway_data:
